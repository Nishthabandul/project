import numpy as np
import matplotlib.pyplot as plt
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_squared_error
from scipy import stats

# Generate synthetic data
np.random.seed(42)
X = np.sort(np.random.rand(100, 1) * 10, axis=0)
y = np.sin(X).ravel() + np.random.randn(100) * 0.1

# Introduce anomalies
X[95:100] = X[95:100] + 2
y[95:100] = y[95:100] + 3

# Fit a Decision Tree Regressor
model = DecisionTreeRegressor(max_depth=3)
model.fit(X, y)
y_pred = model.predict(X)

# Calculate residuals
residuals = y - y_pred

# Z-score for Anomaly Detection
z_scores = np.abs(stats.zscore(residuals))

# Set a threshold for anomalies
threshold = 2.0
anomalies = np.where(z_scores > threshold)

# Plotting
plt.scatter(X, y, label='Data points')
plt.plot(X, y_pred, color='red', label='Decision Tree Prediction')
plt.scatter(X[anomalies], y[anomalies], color='orange', label='Anomalies', edgecolor='black')
plt.legend()
plt.xlabel('X')
plt.ylabel('y')
plt.title('Anomaly Detection using Decision Tree')
plt.show()

# Print the indices and values of anomalies
print("Indices of anomalies:", anomalies[0])
print("Anomalous X values:", X[anomalies])
print("Anomalous y values:", y[anomalies])
